<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.backend.mapper.NovelMapper">
    <resultMap id="NovelResponse" type="com.example.backend.response.Novel">
        <id property="id" column="id"></id>
<!--        <id property="id" column="id"/>-->
        <result property="id" column="id"></result>
        <result property="cover" column="cover"></result>
        <result property="name" column="name"></result>
        <result property="originalName" column="originalName"></result>
        <result property="description" column="description"></result>
        <result property="volume" column="volume"></result>
        <result property="page" column="page"></result>
        <result property="releaseTime" column="releaseTime"></result>
        <association property="language" javaType="com.example.backend.response.Language">
<!--            <id property="id" column="id"></id>-->
            <result property="id" column="languageId"></result>
            <result property="name" column="languageName"></result>
            <result property="code" column="code"></result>
        </association>
        <association property="country" javaType="com.example.backend.response.Country">
<!--          <id property="id" column="id"></id>-->
          <result property="id" column="countryId"></result>
          <result property="name" column="countryName"></result>
        </association>
        <collection property="author" ofType="com.example.backend.response.Author">
<!--          <id property="id" column="authorId"></id>-->
          <result property="id" column="authorId"></result>
          <result property="name" column="authorName"></result>
          <result property="originalName" column="authorOriginalName"></result>
        </collection>
    </resultMap>
    <select id="novelList" resultMap="NovelResponse">
      SELECT
        novel.id,
        novel.cover,
        novel.name,
        novel.original_name,
        novel.description,
        novel.volume,
        novel.page,
        novel.release_time,
        country.id AS countryId,
        country.name AS countryName,
        author.id AS authorId,
        author.name AS authorName,
        author.original_name AS authorOriginalName,
        language.id AS languageId,
        language.name AS languageName,
        language.code
      FROM novel
        LEFT JOIN country ON novel.country_id = country.id
        LEFT JOIN language ON novel.language_id = language.id
        LEFT JOIN author_novel ON novel.id = author_novel.novel_id
        LEFT JOIN author ON author.id = author_novel.author_id
        <where>
            novel.deleted != 1
            <if test="query.authorName != null and !query.authorName.equals('')">
                -- 根据作者id查询出对应的小说 id
              AND novel.id IN(
                SELECT
                    author_novel.novel_id
                FROM
                    author_novel
                WHERE
                    author_id IN (
                        -- 根据名称 查出作者的id
                        SELECT author.id FROM author
                            LEFT JOIN author_novel ON author.id = author_novel.author_id
                        WHERE author.name LIKE concat('%', #{query.authorName}, '%')
                    )
              )
            </if>
            <if test="query.name != null and !query.name.equals('')">
                AND novel.name LIKE concat('%', #{query.name}, '%')
            </if>
            <if test="query.originalName != null and !query.originalName.equals('')">
              AND novel.original_name LIKE  concat('%', #{query.originalName}, '%')
            </if>
        </where>
        -- 按添加顺序排序
        ORDER BY novel.create_time DESC
    </select>
<!--  小说详情 -->
  <select id="novelDetail" resultMap="NovelResponse">
    SELECT
      novel.id,
      novel.cover,
      novel.name,
      novel.original_name AS originalName,
      novel.description,
      novel.volume,
      novel.page,
      novel.release_time,
      country.id AS countryId,
      country.name AS countryName,
      author.id AS authorId,
      author.name AS authorName,
      author.original_name AS authorOriginalName,
      language.id AS languageId,
      language.name AS languageName,
      language.code
    FROM novel
        LEFT JOIN country ON novel.country_id = country.id
        LEFT JOIN language ON novel.language_id = language.id
        LEFT JOIN author_novel ON novel.id = author_novel.novel_id
        LEFT JOIN author ON author.id = author_novel.author_id
    WHERE novel.id = #{id}

  </select>
</mapper>